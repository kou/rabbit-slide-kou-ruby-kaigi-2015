= The history of\n testing framework\n in Ruby

: author
   Kouhei Sutou
: institution
   ClearCode Inc.
: content-source
   RubyKaigi 2015
: date
   2015-12-12
: allotted-time
   35m
: theme
   .

= Silver sponsor

  # image
  # src = images/clear-code-is-a-silver-sponsor.png
  # relative_height = 100

== slide property

: enable-title-on-image
   false

= Goal\n(('note:目標'))

(('tag:center'))
(('tag:large'))
You know about\n
(({/\Atest.+unit\z/i}))

(('tag:center'))
(('note:(({/\\Atest.+unit\\z/i}))を知ること'))

= Test\n(('note:テスト'))

(('tag:center'))
Which Rubies do include\n
(({/\Atest.+unit\z/i}))?\n
(('note:(({/\Atest.+unit\z/i}))を含んでいるRubyはどれでしょう？'))

  # RT
  delimiter = [|]

  (('1.4'))   | (('1.6'))   | (('1.8'))
  (('1.9.1')) | (('1.9.2')) | (('1.9.3'))
  (('2.0'))   | (('2.1'))   | (('2.2'))
  (('2.3'))   |             |

= Answer\n(('note:答え'))

(('tag:center'))
Which Rubies do include\n
(({/\Atest.+unit\z/i}))?\n
(('note:(({/\Atest.+unit\z/i}))を含んでいるRubyはどれでしょう？'))

  # RT
  delimiter = [|]

  (('1.4'))   | (('1.6'))   | ((*1.8*))
  ((*1.9.1*)) | ((*1.9.2*)) | ((*1.9.3*))
  ((*2.0*))   | ((*2.1*))   | ((*2.2*))
  ((*2.3*))   |             |

= History\n(('note:歴史'))

= Characters\n(('note:登場人物'))

  # RT

  testsupp, RubyUnit
  Lapidary,
  Test::Unit, test/unit
  test-unit, minitest
  RSpec,

= Ruby 1.3 times\n(('note:Ruby 1.3の時代'))

  * 1998-1999
  * The first testing framework for Ruby was released\n
    (('note:最初のRuby用のテスティングフレームワークがリリース'))
    * testsupp

= testsupp

  * 1999-4-11: [ruby-talk:00634]\n
    ANN: testsupp.rb 0.1
  * Perl's (({Test})) like API\n
    (('note:PerlのTestモジュールのようなAPI'))
    * Perl's (({Test})) exists since 1998\n
      (('note:PerlのTestモジュールは1998からある'))

= testsupp: API

  # coderay ruby
  require "testsupp"
  include TestSupp

  start_tests
  ok "Hello" == "Hello"
  end_tests

= Ruby 1.4 times\n(('note:Ruby 1.4の時代'))

  * 1999-2000
  * The first xUnit testing framework for Ruby was released\n
    (('note:最初のRuby用のxUnit系テスティングフレームワークが'))\n
    (('note:リリース'))
    * RubyUnit

= RubyUnit

  * Since 1999-11-20 at least\n
    (('note:少なくとも1999年11月20日には存在していた'))
    * [ruby-list:18594]\n
      (('note:"RubyUnit のページは当分更新されないと思うです．"'))
  * The first xUnit testing framework for Ruby\n
    (('note:最初のRuby用のxUnit系テスティングフレームワーク'))

= FYI: XP\n(('note:参考情報：XP'))

  * eXtream Programing
  * The first XP book was published at 1999\n
    (('note:最初のXPの本は1999年に出版'))
  * xUnit was born from XP\n
    (('note:xUnitはXPが生み出した'))

= RubyUnit: API

  # coderay ruby
  require "runit/testcase"
  class Test < RUNIT::TestCase
    def test_add
      assert_equal(3, 1 + 2)
    end
  end

= RubyUnit: Impression\n(('note:感想'))

Ruby-ish\n
(('note:Rubyっぽい'))

= RubyUnit: FYI\n(('note:参考情報'))

  * Test generator exists\n
    (('note:テストジェネレーターがある'))
  * Test exec command exists\n
    (('note:テスト実行コマンドがある'))
  * (('wait'))
    (('note:rubyunit gem exists since 2014-10-12'))\n
    (('note:rubyunitというgemが存在する'))
    * (('note:Not related product'))\n
      (('note:関係のないプロダクト'))

= Ruby 1.6 times: 1\n(('note:Ruby 1.6の時代：1'))

  * 2000-2002
  * The second xUnit testing framework for Ruby was released\n
    (('note:2つ目のRuby用のxUnit系テスティングフレームワークが'))\n
    (('note:リリース'))
    * Lapidary

= Lapidary

  * The first release was 2001-03-20\n
    (('note:最初のリリースは2001年3月20日'))
  * The second xUnit testing framework for Ruby\n
    (('note:2つ目のRuby用のxUnit系テスティングフレームワーク'))
    * Maybe\n
      (('note:たぶん'))

= Lapidary: API

  # coderay ruby
  require "Lapidary/TestCase"
  class TC_Adder < Lapidary::TestCase
    def testAdd
      assertEqual(3, 1 + 2)
    end
  end

= Lapidary: Impression\n(('note:感想'))

Not Ruby-ish\n
(('note:Rubyっぽくない'))

= Lapidary: FYI\n(('note:参考情報'))

  * Has GUI test runner\n
    (('note:GUIのテスト実行機能アリ'))

= Ruby 1.6 times: 2\n(('note:Ruby 1.6の時代：2'))

  * Start trying to bundle a testing framework to Ruby\n
    (('note:テスティングフレームワークをRubyにバンドルする'))\n
    (('note:試みを開始'))
    * RubyUnit + Lapidary = Test::Unit

= Test::Unit

  * Since 2002-02:\n
    [ruby-talk:34744]
  * The first (({\A/test.+unit\z/}))\n
    (('note:最初の(({/\\Atest.+unit\\z/i}))'))
  * The author is the author of Lapidary\n
    (('note:Lapidaryの作者が作者'))

= Test::Unit: API

  # coderay ruby
  require "test/unit"
  class TC_Adder < Test::Unit::TestCase
    def test_add
      assert_equal(3, 1 + 2)
    end
  end

= Test::Unit: Impression\n(('note:感想'))

Ruby-ish\n
(('note:Rubyっぽい'))

= Test::Unit: FYI 1\n(('note:参考情報1'))

  * API is based on RubyUnit\n
    (('note:APIはRubyUnitのよう'))
    * Has RubyUnit compatible API\n
      (('note:RubyUnit互換APIアリ'))
  * Impl. is based on Lapidary\n
    (('note:実装はLapidaryベース'))
    * Has GUI test runner\n
      (('note:GUIのテスト実行機能アリ'))

= Wrap up: Before Ruby 1.8\n(('note:Ruby 1.8の前までのまとめ'))

  * testsupp: Perl like API
  * RubyUnit: Rubyish xUnit
  * Lapidary: Not Rubyish xUnit
  * Test::Unit:
    * RubyUnit API + Lapidary Impl.

= Ruby 1.8 times: 1\n(('note:Ruby 1.8の時代：1'))

  * 2003-2013
  * Ruby bundles a testing framework\n
    (('note:Rubyがテスティングフレームワークをバンドルした'))
    * Test::Unit aka test/unit\n
      (('note:バンドルされたのはTest::Unit'))\n
      (('note:test/unitとも呼ばれる'))

= FYI: Why test/unit?\n(('note:参考情報：なぜtest/unitと呼ぶか'))

  # coderay ruby
  require "test/unit"

= Ruby 1.8 times: 2\n(('note:Ruby 1.8の時代：2'))

RSpec was born\n
(('note:RSpec誕生'))

= RSpec

  * Since 2005-08
  * Tool for Behavior Driven Development\n
    (('note:振る舞い駆動開発用のツール'))
  * Active development\n
    (('note:開発は活発'))

= RSpec 0.1.0: API

  # coderay ruby
  # 2005-08
  require "spec"
  class SpecAdd < Spec::Context
    def add
      (1 + 2).should_equal 3
    end
  end

= RSpec: 1.0.0: API

  # coderay ruby
  # 2007-05
  require "spec"
  describe "Add" do
    it "should support positive + positive" do
      (1 + 2).should == 3
    end
  end

= RSpec 1.0.0: Impression\n(('note:感想'))

Engl-ish\n
(('note:英語っぽい'))

= RSpec: FYI\n(('note:参考情報'))

  * Test exec command exists\n
    (('note:テスト実行コマンドがある'))
    * RubyUnit like\n
      (('note:RubyUnitみたい'))
  * More features (('note:than Test::Unit'))\n
    (('note:Test::Unitより機能が多い'))
    * Mock, Not implemented, ...\n
      (('note:モックや未実装など'))

= Test::Unit in Ruby 1.8\n(('note:Ruby 1.8バンドル後のTest::Unit'))

  * No active development\n
    (('note:開発は停滞'))
  * Maintainer was changed\n
    (('note:メンテナー交代'))
    * The author of minitest\n
      (('note:後のminitestの作者'))

= RSpec and Test::Unit

  * RSpec is getting better but Test::Unit isn't changed...\n
    (('note:RSpecはよくなっているのにTest::Unitは変わらない。。。'))
  * Test::Unit should also be getting better!\n
    (('note:Test::Unitももっとよくしたい！'))

= Test::Unit:\nnew maintainer\n(('note:新しいメンテナー'))

  * New maintainer said:\n
    (('note:新メンテナー曰く'))
    * Can't maintain Test::Unit because it's too complex\n
      (('note:Test::Unitは複雑すぎてメンテナンスできない'))

= Wrap up: Ruby 1.8 times\n(('note:Ruby 1.8時代のまとめ'))

  * Ruby starts bundling Test::Unit (('note:((({/\\Atest.+unit\\z/i})))'))\n
    (('note:RubyがTest::Unitのバンドルを始めた'))
    * But Test::Unit was died...\n
      (('note:バンドル後、Test::Unitは死んだ。。。'))
  * RSpec was born and active\n
    (('note:RSpecが生まれ、活発だった'))

= Ruby 1.9 times\n(('note:Ruby 1.9の時代'))

  * 2009-2014
  * Ruby drops Test::Unit\n
    (('note:RubyがTest::Unitを捨てた'))
    * Because Test::Unit is too complex for new maintainer\n
      (('note:新メンテナーにはTest::Unitは複雑すぎるから'))

= Test::Unit → test-unit

  * Released as test-unit gem\n
    (('note:test-unit gemとしてリリース'))
    * Still (({/\Atest.+unit\z/i}))\n
      (('note:名前変更後も(({/\Atest.+unit\z/i}))'))
    * (('note:test-unit 1.2.3 == Test::Unit in Ruby 1.8'))
  * Maintainer was changed\n
    (('note:メンテナー交代'))
    * Me\n
      (('note:私'))

= test-unit

  * Since 2008-03
  * Active development\n
    (('note:開発は活発'))
  * High backward compatibility\n
    (('note:高い後方互換性'))
    * Exception: Inheritance\n
      (('note:例外：継承時の挙動'))

= minitest

  * Since 2008-10
  * Active development\n
    (('note:開発は活発'))
  * The author is the new maintainer of Test::Unit\n
    (('note:作者はTest::Unitの新メンテナー'))

= minitest and Test::Unit

  * Mini, simple, clean and fast\n
    (('note:小さくてシンプルでキレイで速い'))
  * The author said:\n
    (('note:作者曰く'))
    * 100% Test::Unit compatible\n
      (('note:Test::Unitと100%互換'))
    * But it's not compat in fact...\n
      (('note:実際は互換ではなかった。。。'))

= test/unit in Ruby 1.9

  * Provide Test::Unit API\n
    (('note:Test::Unit互換APIを提供'))
  * Wrapper of minitest\n
    (('note:minitestのラッパー'))
    * Ruby developers developed it\n
      not minitest author\n
      (('note:minitestの作者ではなくRuby開発者が開発'))
  * Not Test::Unit (('note:but (({/\\Atest.+unit\\z/i}))'))\n
    (('note:Test::Unitではないが(({/\\Atest.+unit\\z/i}))ではある'))

= Wrap up: Ruby 1.9 times\n(('note:Ruby 1.9時代のまとめ'))

  * Ruby dropped Test::Unit\n
    (('note:RubyがTest::Unitを捨てた'))
    * (('note:Test::Unit → test-unit gem'))
  * Ruby bundled minitest\n
    (('note:Rubyはminitestをバンドルした'))
  * Ruby created test/unit\n
    (('note:(test/unit provided Test::Unit API)'))\n
    (('note:RubyはTest::Unit APIを提供する(({test/unit}))を新しく作った'))

= Ruby 2.0 times\n(('note:Ruby 2.0の時代'))

  * 2013-
  * No highly important things\n
    (('note:特筆すべきことはない'))
    * test-unit, minitest and RSpec were actively developed\n
      (('note:test-unitもminitestもRSpecも活発に開発が進んでいた'))

= Ruby 2.1 times: 1\n(('note:Ruby 2.1の時代：1'))

  * 2013-
  * minitest 5 introduced incompatible change\n
    (('note:minitest 5で非互換の変更が入った'))

= minitest 5

  * test/unit maintainer said:\n
    (('note:test/unitメンテナー曰く'))
    * Can't maintain test/unit with minitest 5\n
      (('note:minitest 5向けのtest/unitはメンテナンスできない'))
  * test/unit for minitest was dropped\n
    (('note:minitestのラッパーとしてのtest/unitを捨てた'))

= Is no test/unit problem?\n(('note:test/unitがないことは問題なのか？'))

  * Ruby used test/unit for Ruby's test\n
    (('note:RubyはRubyのテストにtest/unitを使っていた'))
    * No test/unit means existing tests can't be worked\n
      (('note:test/unitがなくなると既存のテストが動かない'))

= Solution idea: 1\n(('note:解決案：1'))

  * Keep bundling and using minitest 4\n
    (('note:minitest 4のバンドルを継続し、使い続ける'))
    * Users will be confused because the latest Ruby doesn't bundle the latest minitest\n
      (('note:最新のRubyに最新のminitestがバンドルされていないとユーザーは混乱しそう'))

= Solution idea: 2\n(('note:解決案：2'))

  * Bundle the latest minitest\n
    (('note:最新のminitestをバンドルする'))
    * Ruby uses minitest 4 and test/unit for its tests\n
      (('note:Rubyのテストにはminitest 4とtest/unitを使う'))

(('wait'))
(('tag:center'))
Accepted!

= Note for idea 2\n(('note:案2の補足'))

  * Need to care existing Test::Unit API users\n
    (('note:既存のTest::Unit APIユーザーをケアする必要がある'))
    * Backward compat is important!\n
      (('note:後方互換性は重要！'))
  * Bundle test-unit gem too for Test::Unit API\n
    (('note:Test::Unit互換APIのためにtest-unit gemもバンドル'))

= Wrap up: Ruby 2.1 times\n(('note:Ruby 2.1時代のまとめ'))

  * Ruby developers decided maintain minitest 4 and test/unit for Ruby's tests\n
    (('note:Ruby開発者はRubyのテスト用にminitest 4とtest/unitをメンテナンスすることを決めた'))

= Ruby 2.2 times: 1\n(('note:Ruby 2.2の時代：1'))

  * 2014-
  * Upgrade bundled minitest to 5\n
    (('note:バンドルしているminitestを5に更新'))
    * Move minitest 4 and test/unit to test/\n
      (('note:minitest 4とtest/unitはtest/以下に移動'))

= Upgrade minitest to 5\n(('note:minitest 5に更新'))

  # coderay diff
  -      lib/minitest/*.rb
  + test/lib/minitest/*.rb
  -      lib/test/unit.rb
  + test/lib/test/unit.rb
  -      lib/test/unit/**/*.rb
  + test/lib/test/unit/**/*.rb

= Ruby 2.2 times: 2\n(('note:Ruby 2.2の時代：2'))

  * Bundle test-unit gem again for users\n
    (('note:再びtest-unit gemをバンドル'))
    * Ruby 1.9 dropped test-unit gem\n
      (('note:Ruby 1.9はtest-unit gemを捨てた'))

= Bundle test-unit again\n(('note:test-unitを再びバンドル'))

test-unit gem provides:

  lib/test-unit.rb
  lib/test/unit.rb
  lib/test/unit/**/*.rb

= test/unit in Ruby 2.2\n(('note:Ruby 2.2のtest/unit'))

  * For Ruby developers\n
    (('note:Ruby開発者にとっては'))
    * test/lib/test/unit
  * For users\n
    (('note:ユーザーにとっては'))
    * lib/test/unit = test-unit gem

= Wrap up: Ruby 2.2 times\n(('note:Ruby 2.2時代のまとめ'))

  * Bundle minitest 5\n
    (('note:minitest 5をバンドル'))
  * Bundle test-unit again\n
    (('note:再びtest-unitをバンドル'))
  * Ruby's tests use forked mintiest 4 and test/unit\n
    (('note:Rubyのテストはフォークしたminitest 4とtest/unitを使う'))

= Ruby 2.3 times\n(('note:Ruby 2.3の時代'))

  * 2015-
  * No highly important things\n
    (('note:特筆すべきことはない'))

= Wrap up: History: 1\n(('note:歴史のまとめ：1'))

  * Ruby 1.4 and 1.6 didn't bundle any testing framework\n
    (('note:Ruby 1.4と1.6はテスティングフレームワークをバンドル'))\n
    (('note:していなかった'))
  * Test::Unit was born in Ruby 1.6 times\n
    (('note:Ruby 1.6の時代にTest::Unitが生まれた'))
    * The first (({/\Atest.+unit\z/i}))

= Wrap up: History: 2\n(('note:歴史のまとめ：2'))

  * Ruby 1.8 bundled Test::Unit\n
    (('note:Ruby 1.8はTest::Unitをバンドルした'))
    * (({/\Atest.+unit\z/i})) in 1.8
  * Ruby 1.9 dropped Test::Unit and bundled minitest\n
    (('note:Ruby 1.9はTest::Unitを捨ててminitestをバンドルした'))

= Wrap up: History: 3\n(('note:歴史のまとめ：3'))

  * Ruby 1.9 provided test/unit as a wrapper of minitest\n
    (('note:Ruby 1.9はminitestのラッパーとしてtest/unitを提供した'))
    * test/unit provided Test::Unit compatible API\n
      (('note:test/unitはTest::Unitの互換APIを提供した'))
    * (({/\Atest.+unit\z/i})) in 1.9

= Wrap up: History: 4\n(('note:歴史のまとめ：4'))

  * Ruby 2.0 is same as Ruby 1.9\n
    (('note:Ruby 2.0の状況はRuby 1.9と変わらない'))
    * test/unit is (({/\Atest.+unit\z/i})) in 2.0\n
      (('note:つまり、2.0での(({/\Atest.+unit\z/i}))はtest/unit'))

= Wrap up: History: 5\n(('note:歴史のまとめ：5'))

  * Ruby 2.1 didn't upgrade minitest to 5\n
    (('note:Ruby 2.1はminitestを5に更新しなかった'))
    * minitest 5 has backward incompatible changes\n
      (('note:minitest 5には後方非互換の変更があった'))
    * It breaks Ruby's tests\n
      (('note:非互換を受け入れるとRubyのテストが動かなくなる'))

= Wrap up: History: 6\n(('note:歴史のまとめ：6'))

  * Ruby 2.2 upgraded minitest\n
    (('note:Ruby 2.2はminitestを5に更新した'))
    * Dropped test/unit as minitest wrapper\n
      (('note:Ruby 2.2はminitestのラッパーのtest/unitを捨てた'))
    * Used forked minitest 4 and test/unit for its tests\n
      (('note:Ruby 2.2はRubyのテスト用にminitest 4のフォークとtest/unitを使うことにした'))

= Wrap up: History: 7\n(('note:歴史のまとめ：7'))

  * Ruby 2.2 bundled test-unit gem again\n
    (('note:Ruby 2.2はtest-unit gemを再びバンドルした'))
    * (({/\Atest.+unit\z/i})) in 2.2

= Wrap up: History: 8\n(('note:歴史のまとめ：8'))

  * No highly important things in Ruby 2.3\n
    (('note:Ruby 2.3には特筆すべきことはない'))

= What's (({/\Atest.+unit\z/i}))\n(('note:(({/\\Atest.+unit\\z/i}))はなにか'))

Test::Unit compatible API\n
(('note:Test::Unit互換API'))

= Test::Unit compat API\n(('note:Test::Unit互換API'))

  # coderay ruby
  class XXXTest < Test::Unit::TestCase
    def test_xxx
      assert_equal(xxx, yyy)
    end
  end

= Test::Unit API spirit\n(('note:Test::Unit APIの魂'))

Ruby-ish\n
(('note:Rubyらしさ'))

= Ruby-ish in Test::Unit\n(('note:Test::UnitでのRubyらしさ'))

  * Write test as normal Ruby script\n
    (('note:普通のRubyスクリプトのようにテストを書ける'))
    * It's also important in minitest\n
      (('note:minitestもこれを大事にしている'))

= By example: 1\n(('note:実例：1'))

(('tag:center'))
(('tag:x-large'))
Grouping tests\n
(('note:テストのグループ化'))

(('wait'))
(('tag:center'))
(('tag:x-large'))
↓\n
class

= Group: 1\n(('note:グループ化：1'))

  # coderay ruby
  class TestAdd < Test::Unit::TestCase
    def test_positive_positive
      assert_equal(3, 1 + 2)
    end

    def test_positive_negative
      assert_equal(-2, 1 + -3)
    end
  end

= Group: 2\n(('note:グループ化：2'))

  # coderay ruby
  class TestSub < Test::Unit::TestCase
    def test_positive_positive
      assert_equal(-2, 1 - 3)
    end

    def test_positive_negative
      assert_equal(4, 1 - -3)
    end
  end

= Group: 3\n(('note:グループ化：3'))

  # coderay ruby
  class TestCalc < Test::Unit::TestCase
    class TestAdd < self # TestAdd < TestCalc
      # def test_positive_positive
      # def test_positive_negative
    end
    class TestSub < self # TestAdd < TestCalc
      # def test_positive_positive
      # def test_positive_negative
    end
  end

= Wrap up: Group: 1\n(('note:グループ化のまとめ：1'))

  * Test case has tests\n
    (('note:テストケースは複数のテストを持つ'))
    * Test case is class\n
      (('note:テストケースをクラスとして実装'))
    * Test is method\n
      (('note:テストをメソッドとして実装'))
    * Class has methods\n
      (('note:クラスは複数のメソッドを持つ'))

= Wrap up: Group: 2\n(('note:グループ化のまとめ：2'))

  * Sub test case is sub class\n
    (('note:サブテストケースはサブクラスとして実装'))
    * Sub test case is-a parent test case\n
      (('note:TestAdd is a test case of TestCalc'))\n
      (('note:サブテストケースは親テストケースとis-aの関係'))

= FYI: Group\n(('note:参考情報：グループ化'))

  * Test::Unit and minitest don't support sub test case is a sub class\n
    (('note:Test::Unitとminitestはサブクラスでサブテストケースを作ることをサポートしていない'))
  * test-unit only supports it\n
    (('note:test-unitだけがサポートしている'))
    * It's only one incompatibles\n
      (('note:唯一の非互換'))

= By example: 2\n(('note:実例：2'))

(('tag:center'))
(('tag:x-large'))
Share tests\n
(('note:テストの共有'))

(('wait'))
(('tag:center'))
(('tag:x-large'))
↓\n
module

= Share: 1\n(('note:共有：1'))

  # coderay ruby
  module KVSTests
    def test_read_write
      @kvs[:key] = :value
      assert_equal(:value, @kvs[:key])
    end
  end

= Share: 2\n(('note:共有：2'))

  # coderay ruby
  class TestKVSHash < Test::Unit::TestCase
    include KVSTests
    def setup; @kvs = {}; end
  end
  class TestKVSOpenStruct < Test::Unit::TestCase
    include KVSTests
    def setup; @kvs = OpenStruct.new; end
    end
  end

= Wrap up: Share\n(('note:共有のまとめ'))

  * Tests can be shared by module\n
    (('note:モジュールでテストを共有できる'))
    * Module is used for sharing method implementations in Ruby\n
      (('note:Rubyではモジュールはメソッドの実装を共有するために使われている'))

= By example: 3\n(('note:実例：3'))

(('tag:center'))
(('tag:x-large'))
Assertion\n
(('note:アサーション'))

(('wait'))
(('tag:center'))
(('tag:x-large'))
↓\n
Write as-is\n
(('note:そのまま書く'))

= Assert: Equal\n(('note:アサート：等価'))

  # coderay ruby
  def test_add
    assert_equal(3,
                 1 + 2)
                 # ↑↓ as-is
    # RSpec: expect(1 + 2).eq 3
  end

= Assert: Predicate\n(('note:アサート：述語'))

  # coderay ruby
  def test_exist_readme
    assert(File.exist?("README"))
           # ↑ as-is ↓ not as-is
    # RSpec: expect(File).to exist("README")
  end

= Message from minitest

  # _
    1) Failure:
  TestFile#test_exist_readme [test-file-minitest.rb:5]:
  Failed assertion, no message given.

(('tag:center'))
Less information

= Message from RSpec

  # pango
  1) File README should exist
     <span foreground="red">Failure/Error: expect(File).to exist("README")</span>
       <span foreground="red">expected File to exist</span>
     <span foreground="cyan"># ./spec-file.rb:5:in `block (2 levels) in &lt;top (required)&gt;'</span>

(('tag:center'))
Colorized and snippet

= Message from test-unit

  # pango
  <span foreground="white" background="red">Failure</span>: &lt;false&gt; is not true.
  test_exist_readme(TestFile)
  test-file-test-unit.rb:5:in `test_exist_readme'
       2: 
       3: class TestFile &lt; Test::Unit::TestCase
       4:   def test_exist_readme
  <span foreground="white" background="red">  =&gt; 5:     assert(File.exist?("README"))</span>
       6:   end
       7: end

(('tag:center'))
Colorized and snippet

= power-assert

  # coderay ruby
  def test_exist_readme
    assert do
      File.exist?("README")
      # ↑ as-is
    end
  end

(('tag:center'))
(('note:Built-in in test-unit'))

= Message: power-assert

  # pango
  <span foreground="white" background="red">Failure</span>:
          File.exist?("README")
          |    |
          |    false
          File (NOTE: ← Receiver information)
  test_exist_readme(TestFile)
  /usr/lib/ruby/vendor_ruby/power_assert.rb:36:in `start'
  test-file-power-assert.rb:5:in `test_exist_readme'
       2: 
       3: class TestFile &lt; Test::Unit::TestCase
       4:   def test_exist_readme
  <span foreground="white" background="red">  =&gt; 5:     assert do</span>
       6:       File.exist?("README")
       7:     end
       8:   end

= FYI: test-unit and power-assert

  * Don't recommend\n
    "all power-assert"\n
    (('note:すべてpower-assertは非推奨'))
    * Recommend "power-assert only for predicate"\n
      (('note:述語だけpower-assertを推奨'))

= Assert: Equal

  # coderay ruby
  # @group.users should return
  # sorted names of user
  assert_equal(user_names.sort,
               @group.users)
               # ↑ Align-able
  assert do
    @group.users == user_names.sort
  end

= Align\n(('note:縦に並べる'))

  * Indicate compare targets visually\n
    (('note:視覚的に比較対象ということを示す'))
  * Clarify differences visually\n
    (('note:視覚的に違いを明確にする'))

= e.g.: diff\n(('note:例：diff'))

  Hello Heilo
  -----------
  Hello
  Heilo

= Align in Ruby\n(('note:Rubyで縦に並べる'))

  # coderay ruby
  # Arguments are natural
  method(arg1,
         arg2)
  # Operands aren't natural
  operand1 ==
  operand2

(('tag:center'))
(('note:引数だと自然だけどオペランドだと不自然'))

= Wrap up: Test::Unit API\n(('note:まとめ：Test::Unit API'))

  * Ruby-ish is important in Test::Unit API\n
    (('note:Test::Unit APIではRubyらしいことは重要'))
    * (Sub) test case and (sub) class\n
      (('note:（サブ）テストケースと（サブ）クラス'))
    * Share tests and module\n
      (('note:テストの共有とモジュール'))
    * as-is in assert\n
      (('note:アサートではそのままの使い方で書く'))
